prefix lam: <http://publications.europa.eu/ontology/lam-skos-ap#>
prefix sh:   <http://www.w3.org/ns/shacl#>
prefix dct:  <http://purl.org/dc/terms/>
prefix euvoc: <http://publications.europa.eu/ontology/euvoc#>
prefix cdm:  <http://publications.europa.eu/ontology/cdm#>
prefix ann:  <http://publications.europa.eu/ontology/annotation#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

prefix	xsd: 	<http://www.w3.org/2001/XMLSchema#>
prefix	rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix	dc:		<http://purl.org/dc/terms/>
prefix	coda: 	<http://art.uniroma2.it/coda/contracts/>

rule it.uniroma2.art.semanticturkey.customform.form.propertyConfiguration id:propertyConfiguration {
	nodes = {
 		shapeId uri(coda:randIdGen("res", {})) .
		nameLang literal userPrompt/lang .
		nameLit literal(coda:langString($nameLang)) userPrompt/name .
		path uri userPrompt/path .
		min literal^^xsd:integer userPrompt/min .
		max literal^^xsd:integer userPrompt/max .
		description literal userPrompt/description .
		hasValue uri userPrompt/hasValue .
		pattern literal userPrompt/pattern .
		editorialNote literal userPrompt/editorialNote .
	}
	graph = {
		$shapeId a lam:PropertyConfiguration .
		$shapeId sh:name $nameLit .
		$shapeId lam:path $path .
		OPTIONAL{
			$shapeId sh:minCount $min .
		}
		OPTIONAL{
			$shapeId sh:maxCount $max .
		}
		OPTIONAL{
			$shapeId sh:description $description .
		}
		OPTIONAL{
			$shapeId sh:hasValue $hasValue .
		}
		OPTIONAL{
			$shapeId sh:pattern $pattern .
		}
		OPTIONAL{
			$shapeId skos:editorialNote $editorialNote .
		}
	}
}